--DATABASE 
DROP DATABASE QLBANSACH;

CREATE DATABASE QLBANSACH;

USE QLBANSACH;

CREATE TABLE ROLE 
(
    ID INT AUTO_INCREMENT,
    ROLE_NAME VARCHAR(50),
    PRIMARY KEY (ID) 
);

CREATE TABLE USER
(
    USERNAME VARCHAR(30),
    PASSWORD VARCHAR(300),
    USER_ID INT,
    ROLE_ID INT,
    VERIFY BOOLEAN,
    PRIMARY KEY (USERNAME)
);

CREATE TABLE USER_INFOR
(
    ID INT AUTO_INCREMENT,
    USERNAME VARCHAR(30),
    FULLNAME NVARCHAR(70),
    BIRTHDAY DATETIME,
    PHONE_NUMBER VARCHAR(10),
    MAIL VARCHAR(50),
    ADDRESS NVARCHAR(100),
    CREATE_DATE DATETIME,
    UPDATE_DATE DATETIME,
    PRIMARY KEY(ID)
);

CREATE TABLE CATEGORY
(
    ID INT AUTO_INCREMENT,
    CATEGORY_NAME NVARCHAR(30),
    PRIMARY KEY (ID)
);

CREATE TABLE AUTHOR
(
    ID INT AUTO_INCREMENT,
    AUTHOR_NAME NVARCHAR(50),
    PRIMARY KEY (ID)
);

CREATE TABLE PRODUCT
(
    ID INT,
    PRODUCT_NAME NVARCHAR(100),
    AUTHOR_ID INT,
    CATEGORY_ID INT,
    QUANTITY INT,
    PUBLISHED_DATE DATETIME,
    DESCRIPTION TEXT,
    IMAGE_URL TEXT,
    PRIMARY KEY (ID)
);

CREATE TABLE CART
(
    USER_ID INT,
    TOTAL_MONEY INT,
    STATE VARCHAR(30),
    PRIMARY KEY (USER_ID)
);

CREATE TABLE CART_DETAIL 
(
    ID INT AUTO_INCREMENT,
    USER_ID INT,
    PRODUCT_ID INT,
    NUMBER INT,
    PRICE INT,
    PRIMARY KEY (ID)
);

--- ràng buộc
USE QLBANSACH;

ALTER TABLE USER
ADD 
(
    CONSTRAINT FK_USER_ROLE
    FOREIGN KEY (ROLE_ID)
    REFERENCES ROLE(ID),

    CONSTRAINT FK_USER_USER_INFOR
    FOREIGN KEY (USER_ID)
    REFERENCES USER_INFOR(ID)
);

ALTER TABLE USER_INFOR
ADD 
(   
    CONSTRAINT FK_USERNAME_USERNAME
    FOREIGN KEY (USERNAME)
    REFERENCES USER(USERNAME)
);

ALTER TABLE CART
ADD
(
    CONSTRAINT FK_USER_ID_ID
    FOREIGN KEY (USER_ID)
    REFERENCES USER_INFOR(ID)
);

ALTER TABLE CART_DETAIL
ADD
(
    CONSTRAINT FK_USER_ID_USER_ID
    FOREIGN KEY (USER_ID)
    REFERENCES CART(USER_ID),

    CONSTRAINT FK_PRODUCT_ID_ID
    FOREIGN KEY (PRODUCT_ID)
    REFERENCES PRODUCT(ID)
);

ALTER TABLE PRODUCT
ADD
(
    CONSTRAINT FK_CATEGORY_ID_ID
    FOREIGN KEY (CATEGORY_ID)
    REFERENCES CATEGORY(ID)
);

ALTER TABLE PRODUCT
ADD
(
    CONSTRAINT FK_AUTHOR_ID_ID
    FOREIGN KEY (AUTHOR_ID)
    REFERENCES AUTHOR(ID)
);

--- Data mặc định 
INSERT INTO ROLE(ROLE_NAME)
VALUES 
    ('ADMIN'),
    ('USER');

INSERT INTO USER 
VALUES 
    ('ADMIN', '123', NULL, '1', TRUE);

INSERT INTO USER_INFOR (USERNAME)
VALUES
    ('ADMIN');


INSERT INTO USER 
VALUES 
    ('ADMIN1', '$2b$10$mFRh.1FXkR5AcBs99u16huk.T1s7RQgJd.QcbBuxM5xxWHbu0n/Gy', NULL, '1', TRUE);

INSERT INTO USER_INFOR (USERNAME)
VALUES
    ('ADMIN1');

---  Stored Procedure

-- TẠO TÀI KHOẢN

CREATE PROCEDURE CREATE_USER(IN p_USERNAME NVARCHAR(20), IN p_PASSWORD VARCHAR(300), IN p_MAIL VARCHAR(50), OUT p_Message NVARCHAR(255))
BEGIN 
    DECLARE v_Id INT;
    
    IF (FIND_USER(p_USERNAME) IS NOT NULL) THEN
        SET p_Message = 'ĐÃ TỒN TẠI USER';
    ELSE
        INSERT INTO USER (USERNAME, PASSWORD, ROLE_ID, VERIFY)
        VALUES (p_USERNAME, p_PASSWORD, 2, FALSE);
        
        INSERT INTO USER_INFOR (USERNAME, MAIL, CREATE_DATE, UPDATE_DATE) 
        VALUES (p_USERNAME, p_MAIL, NOW(), NOW());

        SET v_Id = (SELECT ID FROM USER_INFOR WHERE USER_INFOR.USERNAME = p_USERNAME);
        UPDATE USER
        SET USER.USER_ID = v_Id WHERE USER.USERNAME=p_USERNAME;
    
        INSERT INTO CART(USER_ID, TOTAL_MONEY)
        VALUES (v_Id, 0);
        
        SET p_Message = 'TẠO TÀI KHOẢNG THÀNH CÔNG';
    END IF;
    
END;

-- UPDATE THÔNG TIN 
CREATE PROCEDURE UPDATE_INFOR(IN p_USERNAME NVARCHAR(30), IN p_FULLNAME NVARCHAR(70), IN p_BIRTHDAY DATETIME, IN p_PHONE_NUMBER VARCHAR(10), IN p_ADDRESS NVARCHAR(100), OUT p_Message VARCHAR(100))
BEGIN
    IF (FIND_USER(p_USERNAME) IS NULL) THEN
        SET p_Message = 'LỖI TRUY CẬP';
    ELSE
        UPDATE USER_INFOR
        SET
            USER_INFOR.FULLNAME = p_FULLNAME,
            USER_INFOR.BIRTHDAY = p_BIRTHDAY,
            USER_INFOR.PHONE_NUMBER = p_PHONE_NUMBER,
            USER_INFOR.BIRTHDAY = p_BIRTHDAY,
            USER_INFOR.ADDRESS = p_ADDRESS,
            USER_INFOR.UPDATE_DATE = NOW()
        WHERE USER_INFOR.USERNAME = p_USERNAME;

        SET p_Message = 'CẬP NHẬT THÀNH CÔNG';
    END IF;
END;


-- XÁC THỰC TÀI KHOẢN
CREATE PROCEDURE VERIFY_USER(IN p_USERNAME NVARCHAR(30), OUT p_Message NVARCHAR(100))
BEGIN
    IF (FIND_USER(p_USERNAME) IS NULL) THEN
        SET p_Message = 'LỖI TRUY CẬP';
    ELSE
        UPDATE USER
        SET
            USER.VERIFY=TRUE
        WHERE USER.USERNAME = p_USERNAME;

        SET p_Message = 'XÁC THỰC THÀNH CÔNG';
    END IF;
END;


-- THÊM SẢN PHẨM (ADMIN)
CREATE PROCEDURE ADD_NEW_PRODUCT(IN p_PRODUCT_ID INT, IN p_PRODUCT_NAME NVARCHAR(100), IN p_AUTHOR NVARCHAR(50), IN p_CATEGORY NVARCHAR(30), IN p_QUANTITY INT, IN p_PUBLISHED_DATE DATETIME, IN p_DESCRIBE TEXT, p_IMGE_URL TEXT, OUT p_Message NVARCHAR(100))
BEGIN
    DECLARE id_category INT;
    DECLARE id_author INT;
    IF ((SELECT ID FROM PRODUCT WHERE ID = p_PRODUCT_ID) IS NOT NULL) THEN
        SET p_Message = 'SẢN PHẨM ĐÃ TỒN TẠI';
    ELSE
        IF NOT EXISTS(SELECT * FROM AUTHOR WHERE AUTHOR_NAME = p_AUTHOR)  THEN
            INSERT INTO AUTHOR(AUTHOR_NAME) 
            VALUES (p_AUTHOR);
        END IF;
        IF NOT EXISTS (SELECT * FROM CATEGORY WHERE CATEGORY_NAME = p_CATEGORY) THEN
            INSERT INTO CATEGORY(CATEGORY_NAME) VALUES (p_CATEGORY);
        END IF;

        SET id_category = (SELECT ID FROM CATEGORY WHERE CATEGORY_NAME = p_CATEGORY);
        SET id_author = (SELECT ID FROM AUTHOR WHERE AUTHOR_NAME = p_AUTHOR);

        INSERT INTO PRODUCT
        VALUES (p_PRODUCT_ID, p_PRODUCT_NAME, id_author, id_category, p_QUANTITY, p_PUBLISHED_DATE, p_DESCRIBE, p_IMGE_URL);
        SET p_Message = 'ĐÃ THÊM SẢN PHẨM';
    END IF;
END;



--CALL CREATE_USER('Minh Quang', '12344', 'huynhminhquang2803@gmail.com', @p_mes) ; SELECT @p_mes;

--CALL UPDATE_INFOR('Minh Quang', 'Huỳnh Minh Quang', '2003/03/28', '', 'Quận 7, Tp.HCMM', @p_mes); SELECT @p_mes;



--- Function
CREATE FUNCTION FIND_USER(Username VARCHAR(30))
RETURNS VARCHAR(30)
DETERMINISTIC
NO SQL
BEGIN 
    DECLARE result VARCHAR(30);
    SET result =  (SELECT USERNAME 
    FROM USER
    WHERE USER.USERNAME = Username);

    RETURN result;
END;

CREATE FUNCTION FIND_PASSWORD(Username VARCHAR(30))
RETURNS VARCHAR(300)
DETERMINISTIC
NO SQL
BEGIN 
    DECLARE result VARCHAR(300);
    SET result =  (SELECT PASSWORD 
    FROM USER
    WHERE USER.USERNAME = Username);

    RETURN result;
END;


CREATE FUNCTION FIND_ROLE(Username VARCHAR(30))
RETURNS VARCHAR(30)
DETERMINISTIC
NO SQL
BEGIN 
    DECLARE result VARCHAR(30);
    SET result =  (SELECT ROLE.ROLE_NAME 
    FROM ROLE 
    JOIN USER ON USER.ROLE_ID = ROLE.ID
    WHERE USER.USERNAME = Username);

    RETURN result;
END;





